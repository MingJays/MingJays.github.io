<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java虚拟机——内存区域</title>
    <link href="/2020/05/07/004_2020-05-07_Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <url>/2020/05/07/004_2020-05-07_Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p>阅读周志明老师的《深入理解Java虚拟机》第2章：Java内存区域与内存溢出异常，做读书笔记</p></div><h3 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1.运行时数据区域"></a>1.运行时数据区域</h3><p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为不同的数据区域。</p><p><img src="/img/article/004_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-1程序计数器"><a href="#1-1程序计数器" class="headerlink" title="1.1程序计数器"></a>1.1程序计数器</h4><p>程序计数器是一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器，字节码解释器通过改变程序计数器的值来选取下一条执行的字节码指令，每条线程有独立的程序计数器，程序计数器是“<strong>线程私有</strong>”。线程执行Java方法时，程序计数器记录字节码指令地址，线程执行Native方法时，程序计数器的值为空（Undefined）。<strong>唯一一个在虚拟机规范中没有规定任何OutOfMemoryError情况的区域</strong>。</p><h4 id="1-2Java虚拟机栈"><a href="#1-2Java虚拟机栈" class="headerlink" title="1.2Java虚拟机栈"></a>1.2Java虚拟机栈</h4><p>Java虚拟机栈也是<strong>线程私有</strong>，生命周期与线程相同。描述Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法从调用到完成的过程，对应着栈帧在虚拟机栈中入栈到出栈的过程。经常有人把Java内存粗糙的分为堆内存（Heap）和栈内存（Stack），栈内存指的就是虚拟机栈，或者说虚拟机栈中局部变量表部分。</p><p>局部变量表存放编译期可知的基本数据类型、对象引用和returnAddress类型。</p><blockquote><p>基本数据类型：boolean、byte、char、short、int、float、long、double<br>对象引用：reference类型，不等同对象本身，是指向对象起始地址的引用指针，或代表对象的句柄<br>returnAddress类型：指向了一条字节码指令的地址<br>64位长度的long和double占用2个局部变量空间（Slot），其余的数据类型占用1个。<strong>局部变量表所需的内存空间在编译器期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小</strong>。</p></blockquote><p>Java虚拟机栈规定了两种异常情况，StackOverflowError异常和OutOfMemoryError异常</p><blockquote><p>StackOverflowError：如果线程请求的栈深度大于虚拟机所允许的深度，则抛出该异常<br>OutOfMemoryError：如果虚拟机在动态扩展时无法申请到足够的内存，就会抛出该异常</p></blockquote><h4 id="1-3本地方法栈"><a href="#1-3本地方法栈" class="headerlink" title="1.3本地方法栈"></a>1.3本地方法栈</h4><p>本地方法栈与Java虚拟机栈是相似的，Java虚拟机栈为虚拟机执行java 方法（也就是字节码）服务，而本地方法栈为虚拟机使用Native方法服务。Sun的HotSpot虚拟机把本地方法栈和Java虚拟机栈合二为一。</p><h4 id="1-4Java堆"><a href="#1-4Java堆" class="headerlink" title="1.4Java堆"></a>1.4Java堆</h4><p>Java堆被<strong>所有线程共享</strong>，几乎所有的对象实例以及数组都是在堆上分配，随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将导致一些变化，所有对象都在堆上分配变得不是那么“绝对”。</p><p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本都采用<strong>分代收集算法</strong>，所有Java堆可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。</p><p>Java堆可以处于物理上不连续的内存空间中，只要逻辑连续即可，再实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是可扩展的（通过-Xmx和-Xms控制）。当在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h4 id="1-5方法区"><a href="#1-5方法区" class="headerlink" title="1.5方法区"></a>1.5方法区</h4><p>方法区被<strong>所有线程共享</strong>，用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它有一个别名Non-Heap，目的应该就是与Java堆区分开来。HotSpot虚拟机又把方法区成为“永久代”，本质并不等价，仅仅是因为HotSpot虚拟机选择把GC分代收集扩展至方法区，其他虚拟机不存在永久代的概念。但是更容易遇到内存溢出问题（永久代有-XX:MaxPermSize的上限）而且有极少数方法（String.intern()）会因这个导致不同虚拟机有不同表现。JDK1.7的HotSpot，已经把原本放在永久代的字符串常量池移出。</p><p>在方法区的内存回收目标主要是针对常量池的回收和对类型的卸载。当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h4 id="1-6运行时常量池"><a href="#1-6运行时常量池" class="headerlink" title="1.6运行时常量池"></a>1.6运行时常量池</h4><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。Java语音并不要求常量一定只有编译期才能产生，运行期间也可能将新的常量放入池中。这种特性被开发人员利用的比较多的便是String类的intern()方法。当常量池无法再申请到内存时也会抛出OutOfMemoryError异常。</p><h4 id="1-7直接内存"><a href="#1-7直接内存" class="headerlink" title="1.7直接内存"></a>1.7直接内存</h4><p>直接内存并不是虚拟机运行时数据区的一部分，但是这部分内存也被频繁地使用，也可能导致OutOfMemoryError异常。在JDK1.4中新加入了NIO类，引入基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，在一些场景中能显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>本机直接内存不会收到Java堆大小的限制，但是受到本机总内存大小以及处理器寻址空间的限制，服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个区域总和大于物理内存的限制，从而导致动态扩展时出现OutOfMemoryError异常。</p><h3 id="2-对象探秘"><a href="#2-对象探秘" class="headerlink" title="2.对象探秘"></a>2.对象探秘</h3><p>以常用的虚拟机HotSpot和常用的内存区域Java堆为例，探秘HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程</p><h4 id="2-1对象的创建"><a href="#2-1对象的创建" class="headerlink" title="2.1对象的创建"></a>2.1对象的创建</h4><div class="note note-info"><p>创建的对象仅限于普通的Java对象，不包括数组和Class对象</p></div><p>当虚拟机遇到一条new指令时，首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有那必须先执行相应的类加载的过程。在类加载检查通过后，虚拟机将为对象分配内存，对象所需内存的大小在类加载完成后便可完全确定（2.2对象的内存布局介绍），内存分配方式有“指针碰撞”和“空闲列表”。</p><blockquote><p>指针碰撞：假设Java堆内存绝对规整，使用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，所分配的内存就仅仅是把指针向空闲空间那边移动。<br>空闲列表：如果Java堆内存并不是规整的，虚拟机维护一个列表，记录哪些内存块是可用的，再分配时，从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。</p></blockquote><p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用Serial、ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。</p><p>除分配算法外，还需要考虑并发情况下的线程安全问题。可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用原来的指针来分配内存的情况。解决这个问题有两种方案，第一种是对分配内存空间的动作进行同步处理——实际上虚拟机采用CSA配上失败重试的方式保证更新操作的原子性；另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。虚拟机是否使用TLAB，可以通过-XX:+/-UseTLAB参数来设定。</p><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），如果使用TLAB，可以TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就能直接使用，程序能访问到这些字段的数据类型对应的零值。接下来，虚拟机对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象头之中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。紧接着执行<init>方法，把对象按照程序员的意愿进行初始化操作。</init></p><h4 id="2-2对象的内存布局"><a href="#2-2对象的内存布局" class="headerlink" title="2.2对象的内存布局"></a>2.2对象的内存布局</h4><p>对象在内存中存储的布局分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p><h5 id="2-2-1对象头"><a href="#2-2-1对象头" class="headerlink" title="2.2.1对象头"></a>2.2.1对象头</h5><p>HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark Word”。</p><p>对象在运行时数据很多，超过了32bit和64bit，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽可能多的信息。例如，在32位的HotSpot虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的25bit用于存储对象哈希码，4bit存储对象分代年龄，2bit存储锁标志位，1bit固定为0，而在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下的存储内容见表</p><table><thead><tr><th align="center">存储内容</th><th align="center">标志位</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">对象哈希码、对象分代年龄</td><td align="center">01</td><td align="center">未锁定</td></tr><tr><td align="center">指向锁记录的指针</td><td align="center">00</td><td align="center">轻量级锁定</td></tr><tr><td align="center">指向重量级锁的指针</td><td align="center">10</td><td align="center">膨胀（重量级锁定）</td></tr><tr><td align="center">空，不需要记录信息</td><td align="center">11</td><td align="center">GC标记</td></tr><tr><td align="center">偏向线程ID、偏向时间戳、对象分代年龄</td><td align="center">01</td><td align="center">可偏向</td></tr></tbody></table><p>对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3讨论。另外，如果对象是一个Java数组，那么在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。</p><h5 id="2-2-2实例数据"><a href="#2-2-2实例数据" class="headerlink" title="2.2.2实例数据"></a>2.2.2实例数据</h5><p>在程序代码中所定义的字段内容，包括父类继承的，都需要记录，这部分的存储顺序受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。HotSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops（Ordinary Object Pointers），相同宽度的字段总是被分配到一起。在满足这个前提条件，父类的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。</p><h5 id="2-2-3对齐填充"><a href="#2-2-3对齐填充" class="headerlink" title="2.2.3对齐填充"></a>2.2.3对齐填充</h5><p>这部分不是必然存在的，仅仅起着占位符的作用。<strong>由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍</strong>，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><h4 id="2-3对象的访问定位"><a href="#2-3对象的访问定位" class="headerlink" title="2.3对象的访问定位"></a>2.3对象的访问定位</h4><p>Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前主流的访问方式有<strong>使用句柄</strong>和<strong>直接指针</strong>两种。</p><h5 id="2-3-1使用句柄"><a href="#2-3-1使用句柄" class="headerlink" title="2.3.1使用句柄"></a>2.3.1使用句柄</h5><p>Java堆中会划分一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。</p><p><img src="/img/article/004_%E9%80%9A%E8%BF%87%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" srcset="/img/loading.gif" alt=""></p><h5 id="2-3-2直接指针"><a href="#2-3-2直接指针" class="headerlink" title="2.3.2直接指针"></a>2.3.2直接指针</h5><p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。</p><p><img src="/img/article/004_%E9%80%9A%E8%BF%87%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" srcset="/img/loading.gif" alt=""></p><h5 id="2-3-3两者的区别"><a href="#2-3-3两者的区别" class="headerlink" title="2.3.3两者的区别"></a>2.3.3两者的区别</h5><p>两种方式都各有优势，使用句柄来访问最大的好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改。<br>使用直接指针访问最大的好处就是速度更快，节省一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。<strong>HotSpot虚拟机使用的是直接指针访问</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初试搭建博客</title>
    <link href="/2020/04/29/003_2020-04-29_%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/04/29/003_2020-04-29_%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p>本文用于记录搭建博客的探索过程……</p></div><h3 id="1-博客系统的选择"><a href="#1-博客系统的选择" class="headerlink" title="1.博客系统的选择"></a>1.博客系统的选择</h3><p>工欲善其事必先利其器！Github上有许多优秀的开源博客系统，比如[WordPress][wordpress_addr]，<a href="https://zh-cn.wordpress.com/" target="_blank" rel="noopener">Hexo</a>，<a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a>，<a href="https://halo.run/" target="_blank" rel="noopener">Halo</a>等。初试搭建个人博客，查阅了些许资料，初步锁定Hexo和Hugo，最后选择使用Hugo来搭建，因为在我看来Hugo比Hexo（Hexo需要先安装Node.JS）更加小巧轻便，易于安装，于是开启了搭建个人博客的探索之路……</p><p>大家之所以选择搭建个人博客，肯定有部分因素是因为不太喜欢网上其他博客系统的界面风格，所以美化博客肯定是一门必修课，然而在Hugo搭建博客的过程中，我发现Hugo主题资源不是很丰富，主题作者也很少提供简便的使用教程，对于我这样初次搭建博客的小白来说体验不太友好，大家肯定都希望把更多的时间和精力投入到博文的撰写，而不是学习博客系统搭建，Hugo提高了学习地成本。</p><p>之后我又尝试了Hexo，相较之下，我觉得Hexo比Hugo生态更加成熟，主题资源更丰富，<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">Hexo官方</a>提供了中文文档，清晰明了。很多优秀的主题作者都提供了简明的使用教程，这里推荐两个我很喜欢的主题，<a href="https://hexo.fluid-dev.com/docs/guide/" target="_blank" rel="noopener">Fluid</a>和<a href="https://docs.jerryc.me/#/config/quick-start" target="_blank" rel="noopener">Butterfly</a>，Hugo也有许多优点，Hugo的运行速度优于Hexo。对于像我这样刚入门的初学者，我比较推荐使用Hexo，当然，还有许多优秀的开源博客系统可以去尝试，没有最好的，只有最适合自己的。</p><h3 id="2-博客系统的搭建"><a href="#2-博客系统的搭建" class="headerlink" title="2.博客系统的搭建"></a>2.博客系统的搭建</h3><div class="note note-info"><p>本文介绍的搭建环境为Ubuntu 18.0.4</p></div><ul><li><strong>安装Node.JS</strong></li></ul><p>我们首先需要安装nodejs，到[nodejs官网][nodejs下载，选择左边的长期支持版本(LTS)</p><p><img src="/img/article/001_nodejs.png" srcset="/img/loading.gif" alt=""></p><p>下载好的是一个.tar.xz格式的压缩文件，解压文件</p><div class="hljs"><pre><code class="hljs bash">tar xvf node-v12.16.2-linux-x64.tar.xz -C ~/application/mv node-v12.16.2-linux-x64 node-v12.16.2</code></pre></div><p>配置环境变量：修改/etc/profile文件，增加以下内容</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># SET PATH FOR NODEJS</span><span class="hljs-built_in">export</span> NODE_HOME=/home/mingjay/application/node-v12.16.2<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin</code></pre></div><p>使配置的环境变量生效</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile</code></pre></div><p>检查配置是否成功</p><div class="hljs"><pre><code class="hljs bash">node -vnpm -v</code></pre></div><p>安装cnpm</p><div class="hljs"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></div><p>检查cnpm是否安装成功</p><div class="hljs"><pre><code class="hljs bash">cnpm -v</code></pre></div><ul><li><strong>安装Hexo</strong></li></ul><p>使用cnpm安装Hexo博客框架</p><div class="hljs"><pre><code class="hljs bash">cnpm install -g hexo-cli</code></pre></div><p>检查Hexo是否安装成功</p><div class="hljs"><pre><code class="hljs bash">hexo -v</code></pre></div><ul><li><strong>搭建博客</strong></li></ul><p>创建文件夹，存放博客信息，做为博客的根目录</p><div class="hljs"><pre><code class="hljs bash">mkdir blog<span class="hljs-built_in">cd</span> blog</code></pre></div><p>初试化博客，将博客配置信息从GitHub上clone下来（稍微有点慢，耐心等待）</p><div class="hljs"><pre><code class="hljs bash">hexo init</code></pre></div><ul><li><strong>部署博客</strong></li></ul><p>我们把博客部署到Github上，在Github上创建一个repository。创建的时候注意repository的命名，必须是你的Github名字+.github.io</p><p><img src="/img/article/001_createRepository.png" srcset="/img/loading.gif" alt=""></p><p>在_config.yml配置文件中配置刚才创建的repository的信息</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/MingJays/MingJays.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre></div><p>使用cnpm安装git部署的插件</p><div class="hljs"><pre><code class="hljs bash">cnpm install --save hexo-deployer-git</code></pre></div><p>部署博客到Github，输完命令后会提示你输入用户名和密码</p><div class="hljs"><pre><code class="hljs bash">hexo d</code></pre></div><p>可以到刚才创建的仓库中查看是否上传成功。之后就可以使用外网对我们的博客进行访问。</p><blockquote><p>Tips:<br>使用URL：<a href="https://mingjays.github.io" target="_blank" rel="noopener">https://mingjays.github.io</a> 进行访问，不需要www前缀，否则会提示404错误，我就踩过这个坑，后来在<a href="https://help.github.com/en/github/working-with-github-pages" target="_blank" rel="noopener">Github Page</a>找到答案</p></blockquote><h3 id="3-博客系统的美化"><a href="#3-博客系统的美化" class="headerlink" title="3.博客系统的美化"></a>3.博客系统的美化</h3><div class="note note-info"><p>本文介绍的主题以Fluid为例</p></div><p>Hexo拥有非常丰富的主题资源，可以在<a href="https://hexo.bootcss.com/themes/" target="_blank" rel="noopener">Hexo主题</a>挑选自己喜欢的主题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初试Ubuntu美化</title>
    <link href="/2020/04/29/002_2020-04-29_%E5%88%9D%E8%AF%95Ubuntu%E7%BE%8E%E5%8C%96/"/>
    <url>/2020/04/29/002_2020-04-29_%E5%88%9D%E8%AF%95Ubuntu%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p>本文用于记录美化Ubuntu的探索过程……</p></div>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mind The Gap的故事</title>
    <link href="/2020/04/28/001_2020-04-28_MindTheGap%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <url>/2020/04/28/001_2020-04-28_MindTheGap%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p>思念一个人到极致是怎样的感觉？</p></div><h3 id="生当复来归，死当长相思"><a href="#生当复来归，死当长相思" class="headerlink" title="生当复来归，死当长相思"></a>生当复来归，死当长相思</h3><p>故事发生在英国伦敦的Embankment地铁站，从2007年开始，一个着装精致优雅的白发老太太总是独自来到这，但令人感到奇怪的是她从来不搭乘地铁，就静默的的坐在月台的长椅上，认真且小心翼翼地期待着什么…… 当列车缓缓进站，她像一个小姑娘一样脸带娇羞，眼神期盼地等待着车门打开，“Mind the gap”提示音随着车门的开启而响起，“Mind the gap”是车站提示乘客小心列车与站台之间的空隙。每当听到这，老太太脸上都会流露出思念、欣喜、满足的神情。更令人感到奇怪的是，老太太每天都来，一年、两年、三年……</p><p>直到2012年的某天，老太太和往常一下安静的坐在长椅上，等待着列车的进站开门，然而，响起的却是“Please mind the gap between the train and the platform”陌生而冰冷的机械女音，原来地铁站进行升级换代，把原来的提示音更换了。老太太满脸的愕然和难过，紧接着，她找到伦敦地铁站求助，然后大家才知道事情的真相：原来老太太叫Margaret McCollum，她的丈夫叫Laurence Oswald，英国舞台剧演员，“Mind the gap”提示音是20世纪50年代她丈夫所录制的。他们俩就是在Embankment地铁站相遇，她丈夫对她说的第一句话就是“Mind the gap”，后来他们恋爱、结婚、生子，一起度过了大半辈子，直到70岁的时候，Margaret的丈夫因病去世，留她一个在世….</p><p>苏武在《结发为夫妻》中写到：“生当复来归，死当长相思”，自从丈夫去世，Margaret对丈夫的思念如马，自别离，未停蹄。她一个人在空荡荡的屋子里，看着丈夫的照片，黯然伤神，才发觉年少时的“我爱你”经过几十年的岁月已经变成了“我离不开你”，于是她把对丈夫的思念寄托在了Embankment地铁站的“Mind the gap”。虽然见不到人了，听到声音也是好像有爱的人在心里，不感到孤单。于是就有了2007年到2012年的六年间，每天风雨无阻的来到地铁站，她早已熟悉地铁站的一切，那个通道里弹唱的流浪歌手，那些行色匆匆的乘客…….</p><p>与当年两人在这相遇的情形毫无二致，多么希望人群里有一个人你，只可惜我也知道再也不会有你。若不是情深似海，又怎会泛滥成灾……</p><p>当地铁站换掉他老公声音的那天， 她悲痛欲绝，她恳求伦敦地铁站把丈夫的那句录音给她，知道事情真相的工作人员被深深的感动了，他们决定在Embankment地铁站保留Margaret丈夫录制的“Mind the gap”提示音…….</p><p>曾经一度以为，爱情只是一种感觉，稍纵即逝，是很难长久的，但是，真爱一旦发生是不会消失的，只会随着时间历久弥新……</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
